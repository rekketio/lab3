//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.kamenServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="kamenServices.IkamenService", CallbackContract=typeof(client.kamenServices.IkamenServiceCallback))]
    public interface IkamenService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkamenService/Connect", ReplyAction="http://tempuri.org/IkamenService/ConnectResponse")]
        System.Tuple<int, int, string> Connect(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkamenService/Connect", ReplyAction="http://tempuri.org/IkamenService/ConnectResponse")]
        System.Threading.Tasks.Task<System.Tuple<int, int, string>> ConnectAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkamenService/Disconnect", ReplyAction="http://tempuri.org/IkamenService/DisconnectResponse")]
        void Disconnect(int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkamenService/Disconnect", ReplyAction="http://tempuri.org/IkamenService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkamenService/GameMoveSend", ReplyAction="http://tempuri.org/IkamenService/GameMoveSendResponse")]
        void GameMoveSend(int GameSelection, int lobbyId, int senderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IkamenService/GameMoveSend", ReplyAction="http://tempuri.org/IkamenService/GameMoveSendResponse")]
        System.Threading.Tasks.Task GameMoveSendAsync(int GameSelection, int lobbyId, int senderID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IkamenServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IkamenService/StartGame")]
        void StartGame(string nicknameOpponent);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IkamenService/GameMoveReceive")]
        void GameMoveReceive(int GameSelection);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IkamenServiceChannel : client.kamenServices.IkamenService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IkamenServiceClient : System.ServiceModel.DuplexClientBase<client.kamenServices.IkamenService>, client.kamenServices.IkamenService {
        
        public IkamenServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public IkamenServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public IkamenServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public IkamenServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public IkamenServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Tuple<int, int, string> Connect(string nickname) {
            return base.Channel.Connect(nickname);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<int, int, string>> ConnectAsync(string nickname) {
            return base.Channel.ConnectAsync(nickname);
        }
        
        public void Disconnect(int lobbyId) {
            base.Channel.Disconnect(lobbyId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int lobbyId) {
            return base.Channel.DisconnectAsync(lobbyId);
        }
        
        public void GameMoveSend(int GameSelection, int lobbyId, int senderID) {
            base.Channel.GameMoveSend(GameSelection, lobbyId, senderID);
        }
        
        public System.Threading.Tasks.Task GameMoveSendAsync(int GameSelection, int lobbyId, int senderID) {
            return base.Channel.GameMoveSendAsync(GameSelection, lobbyId, senderID);
        }
    }
}
